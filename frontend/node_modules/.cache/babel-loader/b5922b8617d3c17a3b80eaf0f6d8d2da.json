{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\ksaadmin\\\\Desktop\\\\react_project_2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\ksaadmin\\\\Desktop\\\\react_project_2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\ksaadmin\\\\Desktop\\\\react_project_2\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';var EditCountryForm=function EditCountryForm(props){var updateCountry=props.updateCountry;var _useState=useState(props.curCountry),_useState2=_slicedToArray(_useState,2),country=_useState2[0],setCountry=_useState2[1];useEffect(function(){setCountry(props.curCountry);},[props]);// skip applying an effect if certain values haven’t changed between re-renders. [ props ]\nvar handleInputChange=function handleInputChange(e){try{var _e$target=e.target,name=_e$target.name,value=_e$target.value;setCountry(_objectSpread(_objectSpread({},country),{},_defineProperty({},name,value)));}catch(err){console.log(err);alert(\"Error\");}};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:function onSubmit(e){e.preventDefault();updateCountry(country.id,country);}},/*#__PURE__*/React.createElement(\"label\",{for:\"country\"},\"Country\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"name\",value:country.name,onChange:handleInputChange}),/*#__PURE__*/React.createElement(\"label\",{for:\"capital\"},\"Capital\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"capital\",value:country.capital,onChange:handleInputChange}),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"button\",null,\"Update Country\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return props.setEdit(false);},className:\"button muted-button\"},\"Cancel\")));};export default EditCountryForm;","map":{"version":3,"sources":["C:/Users/ksaadmin/Desktop/react_project_2/frontend/src/components/EditCountryForm.js"],"names":["React","useState","useEffect","EditCountryForm","props","updateCountry","curCountry","country","setCountry","handleInputChange","e","target","name","value","err","console","log","alert","preventDefault","id","capital","setEdit"],"mappings":"0hBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,IACxBC,CAAAA,aADwB,CACPD,KADO,CACxBC,aADwB,eAECJ,QAAQ,CAACG,KAAK,CAACE,UAAP,CAFT,wCAEvBC,OAFuB,eAEdC,UAFc,eAG/BN,SAAS,CACP,UAAM,CACJM,UAAU,CAACJ,KAAK,CAACE,UAAP,CAAV,CACD,CAHM,CAIP,CAAEF,KAAF,CAJO,CAAT,CAMA;AACA,GAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,CAAC,CAAI,CAC7B,GAAG,eACqBA,CAAC,CAACC,MADvB,CACKC,IADL,WACKA,IADL,CACWC,KADX,WACWA,KADX,CAEHL,UAAU,gCAAMD,OAAN,wBAAgBK,IAAhB,CAAuBC,KAAvB,GAAV,CACD,OAAOC,GAAP,CAAY,CACXC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACAG,KAAK,CAAC,OAAD,CAAL,CACE,CACH,CARD,CASA,mBACE,4BACE,QAAQ,CAAE,kBAAAP,CAAC,CAAI,CACbA,CAAC,CAACQ,cAAF,GACAb,aAAa,CAACE,OAAO,CAACY,EAAT,CAAaZ,OAAb,CAAb,CACD,CAJH,eAKE,6BAAO,GAAG,CAAC,SAAX,YALF,cAME,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEA,OAAO,CAACK,IAA9C,CAAoD,QAAQ,CAAEH,iBAA9D,EANF,cAQI,6BAAO,GAAG,CAAC,SAAX,YARJ,cASI,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,SAAxB,CAAkC,KAAK,CAAEF,OAAO,CAACa,OAAjD,CAA0D,QAAQ,CAAEX,iBAApE,EATJ,cAUE,0CACE,mDADF,cAEE,8BAAQ,OAAO,CAAE,yBAAML,CAAAA,KAAK,CAACiB,OAAN,CAAc,KAAd,CAAN,EAAjB,CAA6C,SAAS,CAAC,qBAAvD,WAFF,CAVF,CADF,CAmBD,CAtCD,CAuCA,cAAelB,CAAAA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditCountryForm = props => {\n  const {updateCountry} = props;\n  const [ country, setCountry ] = useState(props.curCountry)\n  useEffect(\n    () => {\n      setCountry(props.curCountry)\n    },\n    [ props ]\n  )\n  // skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n  const handleInputChange = e => {\n    try{\n    const { name, value } = e.target\n    setCountry({ ...country, [name]: value })\n  }catch (err) {\n    console.log(err);\n    alert(\"Error\");\n     }\n  }\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        updateCountry(country.id, country)\n      }}>\n      <label for=\"country\">Country</label>\n      <input type=\"text\" name=\"name\" value={country.name} onChange={handleInputChange} />\n      \n        <label for=\"capital\">Capital</label>\n        <input type=\"text\" name=\"capital\" value={country.capital} onChange={handleInputChange} />\n      <p>\n        <button>Update Country</button>\n        <button onClick={() => props.setEdit(false)} className=\"button muted-button\">\n        Cancel\n        </button>\n      </p>\n    </form>\n  )\n}\nexport default EditCountryForm"]},"metadata":{},"sourceType":"module"}