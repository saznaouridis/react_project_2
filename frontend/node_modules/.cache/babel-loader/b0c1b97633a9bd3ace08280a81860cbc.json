{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksaadmin\\\\Desktop\\\\main\\\\frontend\\\\src\\\\forms\\\\EditCountryForm.js\";\nimport React, { useState, useEffect } from 'react';\n\nconst EditCountryForm = props => {\n  const {\n    updateCountry\n  } = props;\n  const [country, setCountry] = useState(props.curCountry);\n  useEffect(() => {\n    setCountry(props.curCountry);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setCountry({ ...country,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: e => {\n      e.preventDefault();\n      updateCountry(country.id, country);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: country.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"Capital\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"capital\",\n    value: country.capital,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, \"Update Country\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.setEditing(false),\n    className: \"button muted-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nexport default EditCountryForm;","map":{"version":3,"sources":["C:/Users/ksaadmin/Desktop/main/frontend/src/forms/EditCountryForm.js"],"names":["React","useState","useEffect","EditCountryForm","props","updateCountry","country","setCountry","curCountry","handleInputChange","e","name","value","target","preventDefault","id","capital","setEditing"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAACC,IAAAA;AAAD,MAAkBD,KAAxB;AACA,QAAM,CAAEE,OAAF,EAAWC,UAAX,IAA0BN,QAAQ,CAACG,KAAK,CAACI,UAAP,CAAxC;AAEAN,EAAAA,SAAS,CACP,MAAM;AACJK,IAAAA,UAAU,CAACH,KAAK,CAACI,UAAP,CAAV;AACD,GAHM,EAIP,CAAEJ,KAAF,CAJO,CAAT,CAJ+B,CAW/B;;AAEA,QAAMK,iBAAiB,GAAGC,CAAC,IAAI;AAC7B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,CAAC,CAACG,MAA1B;AAEAN,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACK,IAAD,GAAQC;AAAtB,KAAD,CAAV;AACD,GAJD;;AAMA,sBACE;AACE,IAAA,QAAQ,EAAEF,CAAC,IAAI;AACbA,MAAAA,CAAC,CAACI,cAAF;AACAT,MAAAA,aAAa,CAACC,OAAO,CAACS,EAAT,EAAaT,OAAb,CAAb;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,MAAxB;AAA+B,IAAA,KAAK,EAAEA,OAAO,CAACK,IAA9C;AAAoD,IAAA,QAAQ,EAAEF,iBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,eASI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAEH,OAAO,CAACU,OAAjD;AAA0D,IAAA,QAAQ,EAAEP,iBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAML,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,IAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAXF,CADF;AAoBD,CAvCD;;AAyCA,eAAed,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst EditCountryForm = props => {\n  const {updateCountry} = props;\n  const [ country, setCountry ] = useState(props.curCountry)\n\n  useEffect(\n    () => {\n      setCountry(props.curCountry)\n    },\n    [ props ]\n  )\n\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n\n    setCountry({ ...country, [name]: value })\n  }\n\n  return (\n    <form\n      onSubmit={e => {\n        e.preventDefault()\n        updateCountry(country.id, country)\n      }}>\n      <label>Name</label>\n      <input type=\"text\" name=\"name\" value={country.name} onChange={handleInputChange} />\n      \n        <label>Capital</label>\n        <input type=\"text\" name=\"capital\" value={country.capital} onChange={handleInputChange} />\n      \n      <p>\n        <button>Update Country</button>\n        <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n        </button>\n      </p>\n    </form>\n  )\n}\n\nexport default EditCountryForm"]},"metadata":{},"sourceType":"module"}