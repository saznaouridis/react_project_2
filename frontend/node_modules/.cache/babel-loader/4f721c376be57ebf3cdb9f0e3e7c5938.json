{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ksaadmin\\\\Desktop\\\\main\\\\frontend\\\\src\\\\forms\\\\EditCountryForm.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\n\nconst EditCountryForm = props => {\n  const {\n    updateCountry\n  } = props;\n  const [country, setCountry] = useState(props.currentCountry);\n  useEffect(() => {\n    setCountry(props.currentCountry);\n  }, [props]); // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setCountry({ ...country,\n      [name]: value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, \"onSubmit=\", event => {\n    event.preventDefault();\n    updateCountry(country.id, country);\n  }, \">\", /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    class: \"btn btn-warning\",\n    name: \"name\",\n    value: country.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"Capital\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"capital\",\n    value: country.capital,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, \"Update Country\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.setEditing(false),\n    className: \"button muted-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, \"Cancel\")));\n};\n\nexport default EditCountryForm;","map":{"version":3,"sources":["C:/Users/ksaadmin/Desktop/main/frontend/src/forms/EditCountryForm.js"],"names":["React","Fragment","useState","useEffect","EditCountryForm","props","updateCountry","country","setCountry","currentCountry","handleInputChange","event","name","value","target","preventDefault","id","capital","setEditing"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,QAAzB,EAAmCC,SAAnC,QAAoD,OAApD;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AAACC,IAAAA;AAAD,MAAkBD,KAAxB;AACA,QAAM,CAAEE,OAAF,EAAWC,UAAX,IAA0BN,QAAQ,CAACG,KAAK,CAACI,cAAP,CAAxC;AAEAN,EAAAA,SAAS,CACP,MAAM;AACJK,IAAAA,UAAU,CAACH,KAAK,CAACI,cAAP,CAAV;AACD,GAHM,EAIP,CAAEJ,KAAF,CAJO,CAAT,CAJ+B,CAW/B;;AAEA,QAAMK,iBAAiB,GAAGC,KAAK,IAAI;AACjC,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;AAEAN,IAAAA,UAAU,CAAC,EAAE,GAAGD,OAAL;AAAc,OAACK,IAAD,GAAQC;AAAtB,KAAD,CAAV;AACD,GAJD;;AAMA,sBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACYF,KAAK,IAAI;AACjBA,IAAAA,KAAK,CAACI,cAAN;AACAT,IAAAA,aAAa,CAACC,OAAO,CAACS,EAAT,EAAaT,OAAb,CAAb;AACD,GAJH,oBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AACA,IAAA,IAAI,EAAC,QADL;AACc,IAAA,KAAK,EAAC,iBADpB;AACsC,IAAA,IAAI,EAAC,MAD3C;AACkD,IAAA,KAAK,EAAEA,OAAO,CAACK,IADjE;AACuE,IAAA,QAAQ,EAAEF,iBADjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,SAAxB;AAAkC,IAAA,KAAK,EAAEH,OAAO,CAACU,OAAjD;AAA0D,IAAA,QAAQ,EAAEP,iBAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CARF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAML,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAvB;AAAgD,IAAA,SAAS,EAAC,qBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAZF,CADF;AAqBD,CAxCD;;AA0CA,eAAed,eAAf","sourcesContent":["import React, { Fragment,useState, useEffect } from 'react'\n\nconst EditCountryForm = props => {\n  const {updateCountry} = props;\n  const [ country, setCountry ] = useState(props.currentCountry)\n\n  useEffect(\n    () => {\n      setCountry(props.currentCountry)\n    },\n    [ props ]\n  )\n\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\n\n  const handleInputChange = event => {\n    const { name, value } = event.target\n\n    setCountry({ ...country, [name]: value })\n  }\n\n  return (\n    <Fragment>\n      onSubmit={event => {\n        event.preventDefault()\n        updateCountry(country.id, country)\n      }}>\n      <label>Name</label>\n      <button  \n      type=\"button\" class=\"btn btn-warning\" name=\"name\" value={country.name} onChange={handleInputChange} />\n      <p>\n        <label>Capital</label>\n        <input type=\"text\" name=\"capital\" value={country.capital} onChange={handleInputChange} />\n      </p>\n      <p>\n        <button>Update Country</button>\n        <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\n        Cancel\n        </button>\n      </p>\n    </Fragment>\n  );\n}\n\nexport default EditCountryForm"]},"metadata":{},"sourceType":"module"}